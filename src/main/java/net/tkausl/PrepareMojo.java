/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.tkausl;

import com.google.common.io.Files;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Properties;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.codehaus.plexus.components.interactivity.Prompter;
import org.codehaus.plexus.components.interactivity.PrompterException;

/**
 * Prepares the local development server to be connectable from this plugin This
 * will enable RCon, set the RCon port to 25575 (default) and the RCon password
 * to 'dev'
 */
@Mojo(name = "prepare")
public class PrepareMojo extends AbstractMojo {

    @Component
    private Prompter prompter;

    /**
     * Path to your local development server
     */
    @Parameter(alias = "path", required = true, defaultValue = "${spigot.path}")
    private File serverPath;

    /**
     * Path to your local development server
     */
    @Parameter(alias = "jar", required = true, defaultValue = "${spigot.jar}")
    private String serverJar;

    @Parameter(alias = "patch", defaultValue = "true")
    private boolean patchJar;

    public void execute() throws MojoExecutionException, MojoFailureException {
        if (!serverPath.exists()) {
            throw new MojoExecutionException("ServerPath does not exist.");
        }
        File pluginsFile = new File(serverPath, "plugins");
        if(!pluginsFile.exists()) pluginsFile.mkdir();
        setProperties();
        createEula();
        if (patchJar) {
            patchServer();
        }
    }

    private void setProperties() throws MojoExecutionException {
        File propertiesFile = new File(serverPath, "server.properties");
        getLog().info("Setting RCon-properties in server.properties...");
        Properties prop = new Properties();
        if (propertiesFile.exists()) {
            try {
                getLog().info("Loading server.properties...");
                prop.load(new FileInputStream(new File(serverPath, "server.properties")));
            } catch (IOException ex) {
                throw new MojoExecutionException("Could not load server.properties");
            }
        } else {
            getLog().info("No server.properties found. Creating new...");
        }
        prop.setProperty("enable-rcon", "true");
        prop.setProperty("rcon.port", "25575");
        prop.setProperty("rcon.password", "dev");
        try {
            prop.store(new FileOutputStream(new File(serverPath, "server.properties")), "Generated by spigot-maven-plugin");
        } catch (IOException ex) {
            throw new MojoExecutionException("Could not save server.properties");
        }
        getLog().info("server.properties written");
    }

    public void createEula() throws MojoExecutionException {
        File eula = new File(serverPath, "eula.txt");
        if (eula.exists()) {
            return;
        }
        String accepted = "no";
        try {
            accepted = prompter.prompt("Do you accept Minecrafts EULA at https://account.mojang.com/documents/minecraft_eula?", Arrays.asList("yes", "no"), "no");
        } catch (PrompterException ex) {}
        Properties prop = new Properties();
        prop.setProperty("eula", accepted.equalsIgnoreCase("yes") + "");
        try {
            prop.store(new FileOutputStream(eula), "");
        } catch (IOException ex) {
            throw new MojoExecutionException("Could not save EULA");
        }
    }

    private void patchServer() throws MojoExecutionException {
        getLog().info("Patching server...");
        File jar = new File(serverPath, serverJar);
        File old = new File(serverPath, serverJar + ".old");
        if (old.exists()) {
            old.delete();
        }
        try {
            Files.move(jar, old);
        } catch (IOException ex) {
            throw new MojoExecutionException("Could not move server jar");
        }

        File tempFile;
        try {
            tempFile = File.createTempFile("patch", null);
            Utils.extractResource("/patch", tempFile);
        } catch (IOException ex) {
            throw new MojoExecutionException("Could not create temp-file");
        }
        try {
            Utils.patchJar(old, jar, tempFile);
        } catch (IOException ex) {
            throw new MojoExecutionException("Could not patch jar");
        }
        getLog().info("Server patched");
    }
}
